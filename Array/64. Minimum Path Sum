class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        //获取行数
        int m = grid.size();
        //获取列数
        int n = grid[0].size();
        //注意，这里arr的初始化问题
        //arr[m+1][n+1] = {0}会运行报错
        long arr[m + 1][n + 1] {};
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(i == 1 || j == 1)
                    arr[i][j] = max(arr[i][j-1], arr[i-1][j]) + grid[i-1][j-1];
                else
                    arr[i][j] = min(arr[i][j-1], arr[i-1][j]) + grid[i-1][j-1];
            }
        }
        return arr[m][n];
    }
};



//这个方法为简化版，因为避免了申请额外的空间
class Solution {
public:
	int minPathSum(vector<vector<int>>& grid) {
   int n=grid.size();
    int m=grid[0].size();
    for(int i=1;i<n;i++)
        grid[i][0]+=grid[i-1][0];
    for(int i=1;i<m;i++)
        grid[0][i]+=grid[0][i-1];
    
    for(int i=1;i<n;i++)
    {
        for(int j=1;j<m;j++)
        {
            grid[i][j]+=min(grid[i-1][j],grid[i][j-1]);                   
                
        }
    }

    return grid[n-1][m-1];
}
};
