//官方提供算法解析

class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0, current = 0;
        //声明一个栈，和vector类似
        stack<int> st;
        while(current < height.size()){
            while(!st.empty() && height[current] > height[st.top()]){
                int top = st.top();
                st.pop();
                if(st.empty())
                    break;
                //只有中间有元素才进行计算，否则在上一步就中断
                int distance = current - st.top() - 1;
                int bounded_height = min(height[current], height[st.top()]) - height[top];
                ans += distance * bounded_height;
            }
            //和vector不同，栈压入元素使用的是push
            st.push(current++);
        }
        return ans;
    }
};


//using two pointers
class Solution {
public:
    int trap(vector<int>& height) {
        int left = 0, right = height.size() - 1;
        int ans = 0;
        int left_max = 0, right_max = 0;
        while(left < right){
            if(height[left] < height[right]){
                height[left] >= left_max?(left_max = height[left]) : ans += (left_max - height[left]);
                ++left;
            }
            else{
                height[right] >= right_max?(right_max = height[right]) : ans += (right_max -height[right]);
                --right;
            }
        }
        return ans;
    }
};
