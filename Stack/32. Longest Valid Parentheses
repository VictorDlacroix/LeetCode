class Solution {
public:
    int longestValidParentheses(string s) {
        int n = s.size();
        stack<int> st;
        st.push(-1);
        int res = 0;
        for(int i = 0; i < n; ++i)
        {
            if(s[i] == '(')st.push(i);
            else{
                st.pop();
                if(!st.empty())
                    res = max(res, i - st.top());
                else
                    st.push(i);
            }
        }
        return res;
    }
};


class Solution {
public:
    int longestValidParentheses(string s) {
        int left=0, right=0, maxlen=0;
        int len=s.size();
        for(int i=0; i<len; ++i)
        {
            if(s[i]=='(')
                left++;
            else
                right++;
            
            if(right==left)
            {
                maxlen=max(maxlen, 2*right);
            }
            else if(right>left)
                left=right=0;     
        }
        
        left=right=0;
        for(int i=len-1; i>=0; --i)
        {
            if(s[i]=='(')
                left++;
            else
                right++;
            if(left==right)
                maxlen=max(maxlen, 2*left);
            else if(left>right)
                left=right=0;
        }
        return maxlen;
    }
};
