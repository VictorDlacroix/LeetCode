class Solution {
public:
    bool validIp(const string& s){
        if(s[0] == '0' && s.size() > 1) return false;
        if(s.size() < 3) return true;
        return s <= "255";
    }
    
    vector<string> restoreIpAddresses(string s) {
        vector<string> res;
        int n = s.length();
        if(n > 12 || n <= 3) return res;
        for(int i = 1; i <= 3 && i < n;i++)
            for(int j = i + 1; j <= i +3 && j < n; j++)
                for(int k = j + 1; k <= j + 3 && k < n; k++){
                    if(n - k > 3) continue;
                    if(validIp(s.substr(k)) && validIp(s.substr(0, i)) && validIp(s.substr(i, j - i)) && validIp(s.substr(j, k - j)))
                       res.push_back(s.substr(0, i) + "." + s.substr(i, j - i) + "." + s.substr(j, k - j) + "." + s.substr(k));
                }
        return res;
    }
};


//另一种判断是否有效的方法
bool isValid(string s)
    {
        if(s.length() > 3) //invalid ip address
            return false;
        int n = stoi(s);
        if(n == 0 && s.length()==1) //only "0" is valid and "00" is invalid
            return true;
        if(s[0] == '0') //"0" is valid
            return false;        
        return n >=0 && n<= 255;
    }
