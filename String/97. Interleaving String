class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n = s1.size(), m = s2.size(), k = s3.size();
        if(k != (n + m)) return false;
        vector<vector<bool>> dp(n + 1, vector<bool>(m + 1, false));
        dp[0][0] = true;
        for(int i = 0; i < n + 1; i++){
            for(int j = 0; j < m + 1; j++){
                if(i == 0 && j != 0 && s2[j - 1] == s3[i + j - 1]){
                    dp[i][j] = dp[i][j - 1];
                }
                else if(j ==0 && i !=0 && s1[i - 1] == s3[i + j - 1]){
                    dp[i][j] = dp[i - 1][j];
                }
                else if(i != 0 && j != 0){
                    dp[i][j] = (s1[i - 1] == s3[i + j - 1] && dp[i - 1][j]) || (s2[j - 1] == s3[i + j - 1] && dp[i][j - 1]);
                }
            }
        }
        return dp[n][m];
    }
};


class Solution {
    string a, b, c;
    vector<vector<int>> cache;
public:
    bool solve(int index_a, int index_b, int index_c) {
        if(index_c == c.size())
            return true;

        if(cache[index_a][index_b] != -1)
            return cache[index_a][index_b];

        if(index_a < a.size() and a[index_a] == c[index_c])
            if(solve(index_a+1, index_b, index_c+1))
                return (cache[index_a][index_b] = true);
        
        if(index_b < b.size() and b[index_b] == c[index_c])
            if(solve(index_a, index_b+1, index_c+1))
                return (cache[index_a][index_b] = true);
        
        return (cache[index_a][index_b] = false);
    }
    
    
    bool isInterleave(string & s1, string & s2, string & s3) {
        a = s1, b = s2, c = s3;
        if(a.size()+b.size() != c.size())
            return false;
        // initialize cache
        cache.resize(a.size() + 1, vector<int>(b.size() + 1, -1));
        
        return solve(0, 0, 0);
    }
};


class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        bool dp[s1.size()+1][s2.size()+1];
        memset(dp, 0 , sizeof(dp));
        if (s1.size() + s2.size() != s3.size())
            return false;
        if (!s1.size()) return s2 == s3;
        if (!s2.size()) return s1 == s3;
        
        dp[0][0] = 1;
        for (int j=1;j<=s2.size();j++) {
            if (dp[0][j-1] && s2[j-1] == s3[j-1])
                dp[0][j] = true;
        }
        for (int i=1;i<=s1.size();i++) {
            if (dp[i-1][0] && s1[i-1] == s3[i-1]) {
                dp[i][0] = true;
            }
            for (int j=1;j<=s2.size();j++) {
                if (s2[j-1] == s3[i+j-1]){
                    dp[i][j] = dp[i][j-1];
                } 
                if (s1[i-1] == s3[i+j-1]){
                    dp[i][j] = dp[i][j] || dp[i-1][j];
                } 
            }
        }
        return dp[s1.size()][s2.size()];
    }
};
