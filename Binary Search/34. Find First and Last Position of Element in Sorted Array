class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        return
		lower_bound(nums.begin(),nums.end(),target)!=nums.end()&&*lower_bound(nums.begin(),nums.end(),target)==target?
		vector<int>{lower_bound(nums.begin(),nums.end(),target)-nums.begin(),upper_bound(nums.begin(),nums.end(),target)-nums.begin()-1}:
		vector<int>{-1,-1};
    }
};


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(!nums.size()) return vector<int>{-1,-1};
        vector<int>::iterator minn=lower_bound(nums.begin(),nums.end(),target);
        vector<int>::iterator maxx=upper_bound(nums.begin(),nums.end(),target);
        return minn!=nums.end()&&*minn==target?vector<int>{minn-nums.begin(),maxx-nums.begin()-1}:vector<int>{-1,-1};
    }
};


class Solution {
public:
   // 'left' will point leftMost index and 'right' will point rightMost index of X
    int left=-1,right=-1;
    // Normal binary serach , find leftmost x 
    void bSearchLeft(vector<int>& nums,int x,int front,int back){
        int mid;
        while(front<=back){
            mid = (front+back)/2;
            if(nums[mid]==x) {left=mid;back=mid-1;}// if you find x , dont stop,try to find x again on left, so new problem will be [front,mid-1]
            else if(nums[mid] < x){front = mid+1;}
            else back = mid-1;
        }
    }
    
    // Normal binary search , this will find rightmost x 
    void bSearchRight(vector<int>& nums,int x,int front,int back){
         int mid;
         while(front<=back){
            mid = (front+back)/2;
            if(nums[mid]==x) {right=mid;front = mid+1;}//// if you find x , dont stop,try to find x again on right, so new problem will be [mid+1,back]
            else if(nums[mid] < x){front = mid+1;}
            else back = mid-1;
         }
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        bSearchLeft(nums,target,0,nums.size()-1);
        bSearchRight(nums,target,0,nums.size()-1);
        vector<int> ans;
        ans.push_back(left);ans.push_back(right);
        return ans;
    }
};


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        auto iter = equal_range(nums.begin(), nums.end(), target); // iter contains an iterator to the first element equal
		// to target, and one past the second element equal to target.
		// If target doesn't exist, both point to end.
		// If one of the values exist, first will point to the value, second will point one past the value.
		// Think of this as lower_bound and upper_bound combined into one.
        if (iter.first == iter.second) return {-1, -1};
        return {iter.first - begin(nums), iter.second - begin(nums) - 1}; // Minus begin(nums) to get the index of each
    }
};
