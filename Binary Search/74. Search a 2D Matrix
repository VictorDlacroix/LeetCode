//把这个matrix当成一个一维数组处理，然后使用二分法查找
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.empty()) return false;
        int m = matrix.size(), n = matrix[0].size();
        int lo = 0, hi = m * n - 1;
        while(lo <= hi){
            int mid = lo + ((hi - lo) >> 1);
            int r = mid / n, c = mid % n;
            if(matrix[r][c] == target) return true;
            else if(matrix[r][c] < target)
                lo = mid + 1;
            else
                hi = mid - 1;
        }
        return false;
    }
};


//先用二分法查找所在的行，在用二分法查找列对应的值
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int m = matrix.size();
        if (m == 0) {
            return false;
        }
        
        int n = matrix[0].size();
        if (n == 0) {
            return false;
        }
        
        // Determine the candidate row.
        int l = 0, r = m - 1;
        while (l + 1 < r) {
            int m = l + (r - l) / 2;
            if (target >= matrix[m][0]) {
                l = m;
            } else {
                r = m;
            }
        }

        int row = -1;        
        if (target >= matrix[r][0]) {
            row = r;
        } else if (target >= matrix[l][0]) {
            row = l;
        }

        if (row == -1) {
            return false;
        }

        // For this candidate row, we gradually check each element.
        l = 0, r = n - 1;
        while (l + 1 < r) {
            int m = l + (r - l) / 2;
            if (target >= matrix[row][m]) {
                l = m;
            } else {
                r = m;
            }
        }

        return matrix[row][l] == target || matrix[row][r] == target;
    }
};
