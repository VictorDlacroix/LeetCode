class Solution {
public:
    void backtracking(vector<string>&result, string str, int cur, int left, int n){
        if(cur == 2*n-1)
            result.push_back(str+")");
        
        if(left < n && cur < 2*n -1)
            backtracking(result, str+"(", cur+1, left+1, n);
        
        if(left > cur-left && cur < 2*n -1)
            backtracking(result, str+")", cur+1, left, n);
    }
        
    vector<string> generateParenthesis(int n) {
        vector<string> result;
        int left = 0;
        int cur = 0;
        string str = "";
        backtracking(result,str,cur,left,n);
        
        return result;
    }
};

//这里注意区分set和vector，及返回值
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<set<string>> brackets(n+1);
        brackets[0].insert("");
        
            
        for(int i = 1; i <= n ; i++){
            for(int j = 1; j <= i/2 ; j++){
                for(auto k =  brackets[j].begin(); k !=  brackets[j].end(); k++){
                    for(auto l =  brackets[i-j].begin(); l != brackets[i-j].end(); l++){
                        brackets[i].insert(*k + *l);
                        brackets[i].insert(*l + *k);
                    }   
                }
            }
            for(auto k =  brackets[i-1].begin(); k !=  brackets[i-1].end(); k++){
                brackets[i].insert("(" + *k + ")");
            }
        }
        
        return vector<string>(brackets[n].begin(),brackets[n].end());
        
    }
};


class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        generateOne(res, "", n, n);
        return res;
    }
    
    private void generateOne(List<String> list, String string, int left, int right) {
        // left, rigth 分别代表可用的左括号数和可用的右括号数，初始都是 n个可用
        if (left == 0 && right == 0) {
            list.add(string);
            return;
        }
        
        if (left > 0) {
            generateOne(list, string + "(", left - 1, right);
        }
        
        // 可用的括号 右括号大于左括号时，说明有 左括号先放置，才会是有效的括号组合
        if (right > left) {
            generateOne(list, string + ")", left, right - 1);    
        } 
    }
}

class Solution {
public:
    void generateOne(vector<string>&res, string Onestr, int left, int right)
    {
        if(left==0&&right==0)
        {
            res.push_back(Onestr);
            return;
        }
        if(left>0)
        {
            generateOne(res, Onestr+"(", left-1, right);
        }
        if(right>left)
        {
            generateOne(res, Onestr+")", left, right-1);
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        generateOne(res, "", n, n);
        return res;
    }
};
