class Solution {
public:
    void dfs(vector<int>& candidates, int pos, vector<int>& curr, int target){
        //符合要求，把curr插入result，并返回
        if(target == 0){
            result.push_back(curr);
            return;
        }
        for(int i = pos; i < candidates.size(); ++i){
            if(target >= candidates[i]){
                curr.push_back(candidates[i]);
                dfs(candidates, i, curr, target - candidates[i]);
                //pop_back()删除容器中尾元素
                curr.pop_back();
            }
        }
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int> curr;
        dfs(candidates, 0, curr, target);
        return result;
    }
private:
    vector<vector<int>> result;
};
