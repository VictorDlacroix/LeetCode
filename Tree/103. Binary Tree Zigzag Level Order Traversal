/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 //空间占用大，速度快
class Solution {
public:
    void dfs(TreeNode* root, int level, vector<list<int>>& ans){
        if(!root) return;
        if(ans.size() < level + 1){
            //First time reached this level
            ans.push_back(list<int>({root->val}));
        }
        else{
            if(level % 2 == 0)
                ans[level].push_back(root->val);
            else
                ans[level].push_front(root->val);
        }
        dfs(root->left, level + 1, ans);
        dfs(root->right, level + 1, ans);
    }
        
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<list<int>> ans;
        dfs(root, 0, ans);
        
        vector<vector<int>> ret;
        for(list<int> l : ans){
            ret.push_back(vector<int>(l.begin(), l.end()));
        }
        return ret;
    }
};



class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if(root == NULL) return {};
        int count = 0;
        queue<TreeNode*> q;
        vector<vector<int>> res;
        q.push(root);
        while(!q.empty()){
            vector<int> l;
            int ls = q.size();
            for(int i = 0; i < ls; ++i){
                TreeNode* c = q.front();
                q.pop();
                l.push_back(c->val);
                if(c->left != NULL)
                    q.push(c->left);
                if(c->right != NULL)
                    q.push(c->right);
            }
            ++count;
            if(count % 2 == 0)
                //反转顺序
                reverse(l.begin(), l.end());
            res.push_back(l);
        }
        return res;
    }
};



